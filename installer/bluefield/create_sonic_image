#!/bin/bash
#
# Copyright (c) 2021 NVIDIA CORPORATION & AFFILIATES.
# Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This script generates the corresponding SONiC installer images for Bluefield
# 1) BFB Image
# 2) PXE Archive for Network Booting

set -e

WDIR=
IMAGE_VER=
KERNEL=
CHROOT_DIR=
INITRD=
VMLINUZ=
MODULES_DIR=
EFIVARS_MOD=

CDIR=/sonic/
SDIR=$CDIR/installer/bluefield
DDIR=$CDIR
CAPSULE=$CDIR/$FILES_PATH/update.cap
BOOTCTL_DRIVER=$CDIR/$FILES_PATH/mlx-bootctl.ko
TMFIFO_DRIVER=$CDIR/$FILES_PATH/mlxbf-tmfifo.ko
TARGET_MACHINE=nvidia-bluefield
BFB="${BFB:-/lib/firmware/mellanox/boot/default.bfb}"
GRUB_AA64=grubnetaa64.efi
CONSOLE_PARAM="console=ttyAMA1 console=hvc0 console=ttyAMA0 earlycon=pl011,0x01000000 earlycon=pl011,0x01800000"

usage() {
cat << EOF
Usage: `basename $0` [ OPTIONS ]
OPTIONS:
-k, --kernel <kernel version>     Kernel version for the SmartNIC.
-v, --verbose                     Run script in verbose mode. Will print out each step of execution.
-h, --help                        Display help
EOF
}

parse_args() {
    while [[ $@ != "" ]]; do
        case $1 in
            -h|--help)
                usage
                exit 0
                ;;
            -v|--verbose)
                shift
                set -x
                ;;
            -k|--kernel)
                shift
                KERNEL=$1
                ;;
            *)
                usage
                exit 1
                ;;
        esac
        shift
    done
}

validate_config() {
    if [[ ! -d "$CHROOT_DIR" ]]; then
        echo "[create_sonic_image] Error! Path to CHROOT not found"
        exit 1
    fi

    if [[ ! -f "$INITRD" ]]; then
        echo "[create_sonic_image] Error! SONiC INITRD not found"
        exit 1
    fi

    if [[ ! -f "$VMLINUZ" ]]; then
        echo "[create_sonic_image] Error! SONiC VMLINUZ not found"
        exit 1
    fi

    if [[ ! -d "$MODULES_DIR" ]]; then
        echo "[create_sonic_image] Error! Path to Kernel Modules not found"
        exit 1
    fi

    if [[ ! -n "$OUTPUT_BFB_IMAGE" ]]; then
        echo "[create_sonic_image] Error! OUTPUT_BFB_IMAGE name not defined. Exiting.."
        exit 1
    fi

    if [[ ! -f "$CDIR/$ONIE_INSTALLER_PAYLOAD" ]]; then
        echo "$ONIE_INSTALLER_PAYLOAD not found. Exiting.."
        exit 1
    fi

    mkbfb=`which mlx-mkbfb`
    if [[ ! -x "${mkbfb}" ]]; then
        echo "Error! mlx-mkbfb is required to build BFB image"
        exit 1
    fi

    if [[ ! -f $CAPSULE ]]; then
        echo "ERROR: Capsule file $CAPSULE does not exist"
        exit 1
    fi

    if [[ ! -f $BOOTCTL_DRIVER ]]; then
        echo "ERROR: Bootctl driver $BOOTCTL_DRIVER does not exist"
        exit 1
    fi

    if [[ ! -f $TMFIFO_DRIVER ]]; then
        echo "ERROR: Bootctl driver $TMFIFO_DRIVER does not exist"
        exit 1
    fi

    if [[ ! -f $EFIVARS_MOD  ]]; then
        echo "ERROR: EFIVARS driver $EFIVARS_MOD does not exist"
        exit 1
    fi

    if [[ ! -f $BFB ]]; then
        echo "ERROR: Default BFB $BFB does not exist"
        exit 1
    fi
}

cleanup_workdir() {
    rm -rf $boot_args $boot_path $boot_desc $arxiv_wdir $WDIR
}

create_workdir() {
    if [[ $WDIR == "" ]]; then
        WDIR=$(mktemp -d /sonic/bfb-wd-XXXX)
    else
        rm -rf $WDIR/*
    fi
    boot_args=$(mktemp /tmp/boot-args-XXXX)
    boot_path=$(mktemp /tmp/boot-path-XXXX)
    boot_desc=$(mktemp /tmp/boot-desc-XXXX)
    arxiv_wdir=$(mktemp -d /tmp/pxe-wd-XXXX)
    trap cleanup_workdir EXIT
}

add_sonic_to_initramfs() {
    # Add the logic to put second stage installer into bfb initramfs
    mkdir -p debian

    cp ${SDIR}/install.sh temp_install.sh
    sed -i -e "s/%%IMAGE_VERSION%%/$IMAGE_VER/g" temp_install.sh
    sed -i -e "s/%%INSTALLER_PAYLOAD%%/$ONIE_INSTALLER_PAYLOAD/g" temp_install.sh
    sed -i -e "s/%%FILESYSTEM_DOCKERFS%%/$FILESYSTEM_DOCKERFS/g" temp_install.sh
    sed -i -e "s/%%DOCKERFS_DIR%%/$DOCKERFS_DIR/g" temp_install.sh
    sed -i -e "s/%%FILESYSTEM_SQUASHFS%%/$FILESYSTEM_SQUASHFS/g" temp_install.sh
    sed -i -e "s/%%KERNEL_VERSION%%/$KERNEL/g" temp_install.sh
    install -m 0755 temp_install.sh ./debian/install.sh
    rm -f temp_install.sh

    # Copy the INSTALLER payload
    cp $CDIR/$ONIE_INSTALLER_PAYLOAD ./debian/

cat > scripts/initrd-install << EOF
#!/bin/bash

printf_msg()
{
	echo "$@" | tee /dev/kmsg
	return 0
}

depmod -a $KERNEL > /dev/null 2>&1
insmod /usr/lib/modules/5.10.0-8-2-arm64/kernel/drivers/virtio/virtio.ko > /dev/null 2>&1
insmod /usr/lib/modules/5.10.0-8-2-arm64/kernel/drivers/virtio/virtio_ring.ko > /dev/null 2>&1
insmod /efivarfs.ko > /dev/null 2>&1
insmod /mlx-bootctl.ko > /dev/null 2>&1
insmod /mlxbf-tmfifo.ko > /dev/null 2>&1
insmod /sbsa_gwdt.ko > /dev/null 2>&1
/usr/sbin/watchdog > /dev/null 2>&1

printf_msg "================================="
printf_msg "Installing SONiC. Please wait..."
printf_msg "================================="

/bin/bash /debian/install.sh
if [ \$? -eq 0 ]; then
	printf_msg "==================================="
	printf_msg "Installation finished. Rebooting..."
	printf_msg "==================================="
	printf_msg
	reboot -f
else
	printf_msg "========================"
	printf_msg "Failed to install SONiC"
	printf_msg "========================"
fi
EOF
    chmod +x scripts/initrd-install
    sudo rm -f conf/conf.d/debian-core*
    sudo sh -c 'echo "BOOT=initrd-install" > conf/conf.d/initrd_install'
    sudo sh -c 'echo "ROOT=\"LABEL=writable\"" > conf/conf.d/default_root'
}

copy_bin()
{
    if [ -e $1 ]; then
        bin=$1
    else
        bin=`which $1 2> /dev/null`
    fi

    if [[ -z "$bin" ]]; then
        echo "ERROR: Cannot find $1"
        exit 1
    else
        sudo mkdir -p .`dirname $bin`
        if [ ! -e .${bin} ]; then
            sudo cp -a $bin .${bin}
        fi

        # Copy dependencies
        for lib in `ldd $bin 2> /dev/null | grep '=>' | awk '{print $3}'`
        do
            if [ -e .$lib ]; then
                continue
            fi
            sudo mkdir -p .`dirname $lib`
            sudo cp -a $lib .$lib
            if [ -h $lib ]; then
                tlib=`readlink -f $lib`
                if [ ! -e .$tlib ]; then
                    sudo mkdir -p .`dirname $tlib`
                    sudo cp $tlib .$tlib
                fi
            fi
	    done
	fi
}

create_bfb_image() {

    pushd $WDIR

    # Copy the initrd into the work directory
    initramfs=$(realpath $INITRD)
    cp $initramfs $WDIR/dump-initramfs-v0
    initramfs=$WDIR/dump-initramfs-v0

    case "$(file --brief --mime-type "$initramfs")" in
        "application/x-lzma")
            cat_initrd="lzcat" ;;
        "application/x-lz4")
            cat_initrd="lz4cat" ;;
        *)
            cat_initrd="zcat" ;;
    esac

    echo "Rebuilding $initramfs"

    mkdir -p ${WDIR}/initramfs
    pushd initramfs
    $cat_initrd "$initramfs" | cpio -i

    # Remove tools coming with busybox
    for tool in `dpkg -L mlxbf-scripts | grep bin/` \
            `dpkg -L grub2-common` \
            `dpkg -L dosfstools` \
            `dpkg -L e2fsprogs` \
            `dpkg -L fdisk` \
            `dpkg -L kmod | grep -v share` \
            `dpkg -L pciutils | grep -v share` \
            `dpkg -L usbutils | grep -v share` \
            `dpkg -L mft` \
            `dpkg -L mft-oem` \
            `dpkg -L kernel-mft-modules` \
            `dpkg -L tar` \
            /usr/sbin/watchdog
    do
        if [ -d $tool ]; then
            continue
        fi
        /bin/rm -f .${tool}
    done

    for tool in `dpkg -L mlxbf-scripts | grep bin/` \
            `dpkg -L dosfstools | grep -v share` \
            `dpkg -L e2fsprogs | grep -v share` \
            `dpkg -L grub2-common` \
            `dpkg -L fdisk | grep -v share` \
            `dpkg -L kmod | grep -v share` \
            `dpkg -L pciutils | grep -v share` \
            `dpkg -L usbutils | grep -v share` \
            `dpkg -L mft` \
            `dpkg -L mft-oem` \
            `dpkg -L kernel-mft-modules` \
            `dpkg -L tar | grep -v share` \
            `dpkg -L grub-efi-arm64-bin` \
            xz efibootmgr gcc-10 bash getopt hexdump lspci perl \
            lsblk shutdown systemctl strings aarch64-linux-gnu-strings \
            mlxbf-bootctl id mkfs fsck watchdog
    do
        if [ -d $tool ]; then
            continue
        fi
        copy_bin $tool
    done

    sudo depmod -a -b ./ $KERNEL
    mkdir -p usr/share/misc/ bin/ var/log/watchdog
    sudo cp /etc/watchdog.conf etc
    sudo cp /usr/share/misc/pci.ids usr/share/misc/
    cp $CHROOT_DIR/usr/share/misc/pci.ids usr/share/misc/
    cp $BOOTCTL_DRIVER .
    cp $TMFIFO_DRIVER .
    cp $EFIVARS_MOD .
    cp $WATCHDOG .

    mkdir -p ./lib/firmware/mellanox/boot/
    cp /lib/firmware/mellanox/boot/default.bfb ./lib/firmware/mellanox/boot/default.bfb
    cp -a /lib/firmware/mellanox/boot/capsule ./lib/firmware/mellanox/boot/
    cp $CAPSULE ./lib/firmware/mellanox/boot/capsule/
    mkdir -p mnt dev sys proc

    add_sonic_to_initramfs

    # Make initramfs with new debian
    find . -print0 | sudo cpio --null -o --format=newc | gzip -9 > "$initramfs"

    popd

    # Make bfb
    printf "$CONSOLE_PARAM initrd=initramfs" > "$boot_args"
       
    printf "VenHw(F019E406-8C9C-11E5-8797-001ACA00BFC4)/Image" > "$boot_path"
    printf "Linux from rshim" > "$boot_desc"
    vmlinuz=$WDIR/vmlinuz
    cat $VMLINUZ > "$vmlinuz"

    $mkbfb --image "$vmlinuz" \
           --initramfs "$initramfs" \
           --capsule "$CAPSULE" \
           --boot-args "$boot_args" \
           --boot-path "$boot_path" \
           --boot-desc "$boot_desc" \
            ${BFB} ${DDIR}/${OUTPUT_BFB_IMAGE}

    echo "BFB is ready: $(readlink -f  ${DDIR}/${OUTPUT_BFB_IMAGE})"

    popd
}

create_pxe_archive(){
    # Installed by grub-efi-arm64-bin deb package
    if [[ ! -f "/usr/lib/grub/arm64-efi/monolithic/$GRUB_AA64" ]]; then
        echo "Grub EFI binary not found, check if grub-efi-arm64-bin package is installed"
        exit 1
    fi

    pushd $arxiv_wdir

    cp /usr/lib/grub/arm64-efi/monolithic/$GRUB_AA64 .

    cp $WDIR/vmlinuz Image
    cp $WDIR/dump-initramfs-v0 initramfs

    console_params=$CONSOLE_PARAM j2 /sonic/installer/bluefield/grub.cfg.j2 > grub.cfg
    cp /sonic/installer/bluefield/PXE_README.txt .

    tar -C $arxiv_wdir -cvzf ${DDIR}/${OUTPUT_PXE_IMAGE} .

    popd
}

main() {
    echo $@
    parse_args $@

    . $CDIR/onie-image-arm64.conf

    CHROOT_DIR=$CDIR/$FILESYSTEM_ROOT
    INITRD=$CDIR/$FILESYSTEM_ROOT/boot/initrd.img-$KERNEL
    VMLINUZ=$CDIR/$FILESYSTEM_ROOT/boot/vmlinuz-$KERNEL
    MODULES_DIR=$CDIR/$FILESYSTEM_ROOT/lib/modules/$KERNEL
    EFIVARS_MOD=$MODULES_DIR/kernel/fs/efivarfs/efivarfs.ko
    WATCHDOG=$MODULES_DIR/kernel/drivers/watchdog/sbsa_gwdt.ko
    IMAGE_VER=$(cat $CHROOT_DIR/etc/sonic/sonic_version.yml | grep "build_version" | sed -e "s/build_version: //g;s/'//g")
    validate_config

    create_workdir
    echo "Work directory: $WDIR"

    create_bfb_image

    if [[ $IMAGE_TYPE == pxe ]]; then
        create_pxe_archive
    fi
}

main $@
