#!/bin/bash
#
# Copyright (c) 2021 NVIDIA CORPORATION & AFFILIATES.
# Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
set -e

IMAGE_VER=
CDIR=/sonic/
SDIR=/sonic/installer/bluefield
DDIR=/sonic/
WDIR=
CAPSULE=/lib/firmware/mellanox/boot/capsule/MmcBootCap
TARGET_MACHINE=nvidia-bluefield

usage() {
cat << EOF
Usage: `basename $0` [ OPTIONS ]
OPTIONS:
-i, --install_bfb <BFB>           Installation BFB to be used as a basis for the target BFB. Default: $BFB
-s, --sonic_version <IMAGE_VER>   SONiC version to be installed
-v, --verbose                     Run script in verbose mode. Will print out each step of execution.
-h, --help                        Display help
EOF
}

validate_config() {
    if [[ $BFB == "" ]]; then
        if [[ $BFINSTALL_FILE == "" ]]; then
            echo "Error! Path to reference BFB is not specified! Please set BFINSTALL_FILE variable."
            exit 1
        fi

        BFB=/sonic/$FILES_PATH/$BFINSTALL_FILE
        if [ ! -f $BFB ]; then
            echo "Error! Reference BFB does not exist!"
            exit 1
        fi
    fi

    if [ ! -n "$OUTPUT_BFB_IMAGE" ]; then
        echo "OUTPUT_BFB_IMAGE name not defined. Exiting.."
        exit 1
    fi

    if [ ! -f "$CDIR/$ONIE_INSTALLER_PAYLOAD" ]; then
        echo "$ONIE_INSTALLER_PAYLOAD not found. Exiting.."
        exit 1
    fi

    mkbfb=`which mlx-mkbfb`
    if [ ! -x "${mkbfb}" ]; then
        echo "Error! mlx-mkbfb is required to build BFB image"
        exit 1
    fi

    if [ ! -e $CAPSULE ]; then
        echo "ERROR: Capsule file $CAPSULE does not exist"
        exit 1
    fi
}

parse_args() {
    while [[ $@ != "" ]]; do
        case $1 in
            -h|--help)
                usage
                exit 0
                ;;
            -i|--install_bfb)
                shift
                BFB=$1
                ;;
            -s|--sonic_version)
                shift
                IMAGE_VER=$1
                ;;
            *)
                usage
                exit 1
                ;;
        esac
        shift
    done
}

cleanup_workdir() {
    rm -rf $WDIR
}

create_workdir() {
    if [[ $WDIR == "" ]]; then
        WDIR=$(mktemp -d /sonic/bfb-wd-XXXX)
        trap cleanup_workdir EXIT
    else
        rm -rf $WDIR/*
    fi
}

initramfs_put_installer() {
    mkdir -p debian

    cp ${SDIR}/install.sh temp_install.sh
    sed -i -e "s/%%IMAGE_VERSION%%/$IMAGE_VER/g" temp_install.sh
    sed -i -e "s/%%INSTALLER_PAYLOAD%%/$ONIE_INSTALLER_PAYLOAD/g" temp_install.sh
    sed -i -e "s/%%FILESYSTEM_DOCKERFS%%/$FILESYSTEM_DOCKERFS/g" temp_install.sh
    sed -i -e "s/%%DOCKERFS_DIR%%/$DOCKERFS_DIR/g" temp_install.sh
    sed -i -e "s/%%FILESYSTEM_SQUASHFS%%/$FILESYSTEM_SQUASHFS/g" temp_install.sh
    install -m 0755 temp_install.sh ./debian/install.sh
    rm -f temp_install.sh

    # Copy the INSTALLER payload
    cp $CDIR/$ONIE_INSTALLER_PAYLOAD ./debian/

    cat > etc/init.d/install-debian << EOF
#!/bin/sh

echo
echo "=================================" | tee /dev/kmsg
echo "Installing SONiC. Please wait..." | tee /dev/kmsg
echo "=================================" | tee /dev/kmsg

sleep 5

/bin/sh /debian/install.sh
if [ \$? -eq 0 ]; then
        echo "===================================" | tee /dev/kmsg
        echo "Installation finished. Rebooting..." | tee /dev/kmsg
        echo "===================================" | tee /dev/kmsg
        echo
        sleep 3
        /sbin/shutdown -r 0
else
        echo "========================" | tee /dev/kmsg
        echo "Failed to install SONiC" | tee /dev/kmsg
        echo "========================" | tee /dev/kmsg
fi
EOF
    chmod 755 etc/init.d/install-debian
    ln -snf ../init.d/install-debian etc/rcS.d/S99install-debian
}

create_initramfs() {
    $mkbfb -x ${BFB}
    local initramfs_template=$PWD/dump-initramfs-v0
    local sonic_installer_initramfs=$PWD/sonic-installer-initramfs
    if [ ! -f $initramfs_template ]; then
        echo "Error! BFB initramfs ('$initramfs_template') is not found!"
        exit 1
    fi

    local initramfs_dir=$WDIR/initramfs
    mkdir -p $initramfs_dir
    pushd $initramfs_dir >/dev/null
    cpio -id < $initramfs_template

    initramfs_put_installer

    find . | cpio -H newc -o | gzip -9 > $sonic_installer_initramfs

    popd >/dev/null

    echo $sonic_installer_initramfs
}

create_bfb_image() {
    local initramfs=$1
    $mkbfb --initramfs $initramfs --capsule $CAPSULE ${BFB} ${DDIR}/${OUTPUT_BFB_IMAGE}
    echo "BFB is ready: $(readlink -f  ${DDIR}/${OUTPUT_BFB_IMAGE})"
}

main() {
    echo $@
    parse_args $@

    . $CDIR/onie-image-arm64.conf

    validate_config

    create_workdir
    echo "Work directory: $WDIR"
    pushd $WDIR
    local sonic_installer_initramfs=$(create_initramfs)

    create_bfb_image $sonic_installer_initramfs
    popd
}

main $@
