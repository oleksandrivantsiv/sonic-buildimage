From 4ab192df23362e64d1a11441fae82329388f103e Mon Sep 17 00:00:00 2001
From: Pavel Shirshov <pavelsh@microsoft.com>
Date: Mon, 16 Nov 2020 18:00:12 -0800
Subject: [PATCH 1/8] Add support of bgp tcp DSCP value

---
 bgpd/bgp_network.c | 11 ++++-------
 bgpd/bgp_vty.c     | 44 ++++++++++++++++++++++++++++++++++++++++++++
 bgpd/bgpd.c        |  1 +
 bgpd/bgpd.h        |  3 +++
 4 files changed, 52 insertions(+), 7 deletions(-)

diff --git a/bgpd/bgp_network.c b/bgpd/bgp_network.c
index 3fb7619ed..70c771683 100644
--- a/bgpd/bgp_network.c
+++ b/bgpd/bgp_network.c
@@ -743,11 +743,9 @@ int bgp_connect(struct peer *peer)
 #ifdef IPTOS_PREC_INTERNETCONTROL
 	frr_with_privs(&bgpd_privs) {
 		if (sockunion_family(&peer->su) == AF_INET)
-			setsockopt_ipv4_tos(peer->fd,
-					    IPTOS_PREC_INTERNETCONTROL);
+			setsockopt_ipv4_tos(peer->fd, peer->bgp->tcp_dscp);
 		else if (sockunion_family(&peer->su) == AF_INET6)
-			setsockopt_ipv6_tclass(peer->fd,
-					       IPTOS_PREC_INTERNETCONTROL);
+			setsockopt_ipv6_tclass(peer->fd, peer->bgp->tcp_dscp);
 	}
 #endif
 
@@ -824,10 +822,9 @@ static int bgp_listener(int sock, struct sockaddr *sa, socklen_t salen,
 
 #ifdef IPTOS_PREC_INTERNETCONTROL
 		if (sa->sa_family == AF_INET)
-			setsockopt_ipv4_tos(sock, IPTOS_PREC_INTERNETCONTROL);
+			setsockopt_ipv4_tos(sock, bgp->tcp_dscp);
 		else if (sa->sa_family == AF_INET6)
-			setsockopt_ipv6_tclass(sock,
-					       IPTOS_PREC_INTERNETCONTROL);
+			setsockopt_ipv6_tclass(sock, bgp->tcp_dscp);
 #endif
 
 		sockopt_v6only(sa->sa_family, sock);
diff --git a/bgpd/bgp_vty.c b/bgpd/bgp_vty.c
index 4df2abef8..950d1d25c 100644
--- a/bgpd/bgp_vty.c
+++ b/bgpd/bgp_vty.c
@@ -1558,6 +1558,42 @@ DEFUN (no_router_bgp,
 	return CMD_SUCCESS;
 }
 
+/* bgp session-dscp */
+
+DEFUN (bgp_session_dscp,
+       bgp_session_dscp_cmd,
+       "bgp session-dscp DSCP",
+        BGP_STR
+       "Override default (C0) bgp TCP session DSCP value\n"
+       "Manually configured dscp parameter\n")
+{
+	struct bgp *bgp = VTY_GET_CONTEXT(bgp);
+
+	uint8_t value = (uint8_t)strtol(argv[2]->arg, NULL, 16);
+	if ((value == 0 && errno == EINVAL) || (value > 0x3f))
+	{
+		vty_out (vty, "%% Malformed bgp session-dscp parameter\n");
+		return CMD_WARNING_CONFIG_FAILED;
+	}
+
+	bgp->tcp_dscp = value << 2;
+
+	return CMD_SUCCESS;
+}
+
+DEFUN (no_bgp_session_dscp,
+       no_bgp_session_dscp_cmd,
+       "no bgp session-dscp",
+       NO_STR
+       BGP_STR
+       "Override default (C0) bgp tcp session ip dscp value\n")
+{
+	struct bgp *bgp = VTY_GET_CONTEXT(bgp);
+
+	bgp->tcp_dscp = IPTOS_PREC_INTERNETCONTROL;
+
+	return CMD_SUCCESS;
+}
 
 /* BGP router-id.  */
 
@@ -17053,6 +17089,10 @@ int bgp_config_write(struct vty *vty)
 		if (CHECK_FLAG(bgp->flags, BGP_FLAG_NO_FAST_EXT_FAILOVER))
 			vty_out(vty, " no bgp fast-external-failover\n");
 
+		/* BGP session DSCP value */
+		if (bgp->tcp_dscp != IPTOS_PREC_INTERNETCONTROL)
+			vty_out(vty, " bgp session-dscp %02X\n", bgp->tcp_dscp >> 2);
+
 		/* BGP router ID. */
 		if (bgp->router_id_static.s_addr != INADDR_ANY)
 			vty_out(vty, " bgp router-id %pI4\n",
@@ -17662,6 +17702,10 @@ void bgp_vty_init(void)
 	/* "no router bgp" commands. */
 	install_element(CONFIG_NODE, &no_router_bgp_cmd);
 
+	/* "bgp session-dscp command */
+	install_element (BGP_NODE, &bgp_session_dscp_cmd);
+	install_element (BGP_NODE, &no_bgp_session_dscp_cmd);
+
 	/* "bgp router-id" commands. */
 	install_element(BGP_NODE, &bgp_router_id_cmd);
 	install_element(BGP_NODE, &no_bgp_router_id_cmd);
diff --git a/bgpd/bgpd.c b/bgpd/bgpd.c
index 7e528b219..005523544 100644
--- a/bgpd/bgpd.c
+++ b/bgpd/bgpd.c
@@ -3229,6 +3229,7 @@ static struct bgp *bgp_create(as_t *as, const char *name,
 	bgp->evpn_info = XCALLOC(MTYPE_BGP_EVPN_INFO,
 				 sizeof(struct bgp_evpn_info));
 
+	bgp->tcp_dscp = IPTOS_PREC_INTERNETCONTROL;
 	bgp_evpn_init(bgp);
 	bgp_evpn_vrf_es_init(bgp);
 	bgp_pbr_init(bgp);
diff --git a/bgpd/bgpd.h b/bgpd/bgpd.h
index 8b93c450e..e780d8a03 100644
--- a/bgpd/bgpd.h
+++ b/bgpd/bgpd.h
@@ -743,6 +743,9 @@ struct bgp {
 	/* Weighted ECMP related config. */
 	enum bgp_link_bw_handling lb_handling;
 
+	/* dscp value for tcp sessions */
+	uint8_t tcp_dscp;
+
 	/* Process Queue for handling routes */
 	struct work_queue *process_queue;
 
-- 
2.12.2

